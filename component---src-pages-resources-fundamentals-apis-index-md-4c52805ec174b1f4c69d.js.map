{"version":3,"file":"component---src-pages-resources-fundamentals-apis-index-md-4c52805ec174b1f4c69d.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/resources/fundamentals/apis/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-premiere-pro/uxp-premiere-pro/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"apis-within-uxp\"\n    }}>{`APIs within UXP`}</h1>\n    <p>{`We assume that you have been able to write your first `}{/*[script](../../../scripts/getting-started/) or */}<a parentName=\"p\" {...{\n        \"href\": \"../../../plugins/getting-started/\"\n      }}>{`plugin`}</a>{` successfully by now. For writing more complex tasks, you will need access to more APIs. But first, let's understand what types of APIs are available and where to find them.`}</p>\n    <p>{`The UXP platform has two main constituents`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Core UXP APIs`}</li>\n      <li parentName=\"ol\">{`Host-specific APIs`}</li>\n    </ol>\n    <p>{`You will see a few examples of these APIs in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../recipes/\"\n      }}>{`recipes`}</a>{` but for now, just try and understand the difference between them.`}</p>\n    <h2 {...{\n      \"id\": \"uxp-core-apis\"\n    }}>{`UXP Core APIs`}</h2>\n    <p>{`These APIs enable you to create user interfaces, perform file operations, make network calls, etc.`}</p>\n    <p>{`The method to mount or use these APIs may vary. Many of them are directly available in the global scope, such as `}<a parentName=\"p\" {...{\n        \"href\": \"../../../uxp-api/reference-js/Global%20Members/Crypto/\"\n      }}>{`Crypto`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"../../../uxp-api/reference-js/Global%20Members/HTML%20DOM/Document/\"\n      }}>{`Documents`}</a>{`. But for certain modules, you first need to seek permission in the manifest (for plugins) or mount it specifically using `}<inlineCode parentName=\"p\">{`require()`}</inlineCode>{`. For example, `}<inlineCode parentName=\"p\">{`require(os)`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`require('uxp').shell`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"host-specific-apis\"\n    }}>{`Host-specific APIs`}</h2>\n    <p>{`These APIs are meant for modifying or interacting with the document.`}</p>\n    <InlineAlert slots=\"text1, text2, text3\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT`}</strong>{` `}<br></br></p>\n    <p>{`Note that these are also referred to as `}<strong parentName=\"p\">{`Document Object Model (DOM) APIs`}</strong>{`. Throughout our documentation, we will use Premiere Pro APIs, DOM APIs or Premiere Pro DOM APIs interchangeably. `}<br></br></p>\n    <p>{`Also, keep in mind that, these should `}<strong parentName=\"p\">{`not`}</strong>{` be confused with the HTML DOM which serves your plugin`}{/*/script*/}{` UI.`}</p>\n    <p>{`You will learn more about the mounting technique in the `}<a parentName=\"p\" {...{\n        \"href\": \"../dom-versioning/\"\n      }}>{`Premiere Pro DOM API`}</a>{` topic.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Let's imagine you want to write a `}{/*script/*/}{`plugin that`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Reads a text from a file in the user's system.`}</li>\n      <li parentName=\"ol\">{`Adds the text to the document.`}</li>\n      <li parentName=\"ol\">{`And, applies certain modifications to it.`}</li>\n    </ol>\n    <p>{`For Step #1, since you would like to access the user's file system, you will use the UXP API's `}<inlineCode parentName=\"p\">{`localFileSystem`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`fs`}</inlineCode>{` module.`}<br></br>{`\nIn Steps #2 and 3, since you need to update the document, you will use the DOM APIs.`}</p>\n    <h2 {...{\n      \"id\": \"updates-and-releases\"\n    }}>{`Updates and releases`}</h2>\n    <p>{`We are still evolving the API surface and future releases will support more capabilities. Therefore, each release will have updates to both - DOM and UXP APIs.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"../../../changelog\"\n      }}>{`What's new`}</a>{` section, lists all the new features, changes, and fixes carried by the latest release. The DOM APIs are versioned as per the application version. However, you need to pay attention to the UXP version associated with each release.`}</p>\n    <p>{`When your `}{/*script/*/}{`plugin intends to use a specific UXP API, the host application must support that version of UXP. For example, Premiere Pro v25.2 supports UXP v8.1, but if you use an API from UXP v8.2, your plugin`}{/*/script*/}{` will not work and lead to unexpected errors. Pay attention to the minimum compatible versions of UXP and the host application called out in the API references, examples and samples.`}</p>\n    <p>{`To determine the minimum UXP version supported by the application, you have a couple of options`}</p>\n    <ol>\n      <li parentName=\"ol\">{`In UDT, once you have Premiere Pro running and it appears under 'Connected apps', you will see the UXP version displayed along with the Premiere Pro version number.`}</li>\n      <li parentName=\"ol\">{`Programmatically, you can query the host information using UXP APIs. Use the example from `}<a parentName=\"li\" {...{\n          \"href\": \"../../recipes/host-info\"\n        }}>{`this recipe`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"../../../changelog\"\n        }}>{`What's new`}</a>{` section, will mention the UXP version number for each release.`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","isMDXComponent"],"sourceRoot":""}