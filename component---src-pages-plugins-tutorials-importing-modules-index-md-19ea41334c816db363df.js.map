{"version":3,"file":"component---src-pages-plugins-tutorials-importing-modules-index-md-19ea41334c816db363df.js","mappings":"0TAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIU,YAJF,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,sBACJ,uBACJA,EAAAA,EAAAA,KAAA,SAAI,oNACJA,EAAAA,EAAAA,KAAA,SAAI,+IAA8IA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,YAAyB,8CAA6CX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAAuB,6BAA4BX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,WAAwB,gCACvXX,EAAAA,EAAAA,KAAA,SAAI,4BACJA,EAAAA,EAAAA,KAACL,EAAS,CAACiB,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,yBAAyBJ,QAAQ,eACvFV,EAAAA,EAAAA,KAAA,MACE,GAAM,WACJ,aACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,eACX,wKAKNX,EAAAA,EAAAA,KAAA,MACE,GAAM,eACJ,iBACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,eACX,yKAYNX,EAAAA,EAAAA,KAAA,SAAI,QAAOA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,WAAwB,iRAAgRX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,OAAoB,2CAC/XX,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,wDAGnC,CAEAP,EAAWW,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/plugins/tutorials/importing-modules/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-premiere-pro/uxp-premiere-pro/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"javascript-modules\"\n    }}>{`JavaScript Modules`}</h1>\n    <p>{`The beauty of plugins is that it allows you to have more than just one JavaScript file. And in order to manage elaborate projects, you might want to modularize your code and manage it from separate JS files.`}</p>\n    <p>{`To make use of modules within your code, you will need a mechanism to include the modules within other files. JavaScript has never had the `}<inlineCode parentName=\"p\">{`#include`}</inlineCode>{` syntax of C and its descendants, nor the `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{` of Python. Instead, the `}<inlineCode parentName=\"p\">{`require`}</inlineCode>{` statement helps you do so.`}</p>\n    <p>{`Here's how to use them:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"indexjs\"\n    }}>{`index.js`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// specify the path of the JS file that has the required module\nconst { foo, bar } = require(\"./includeMe.js\");\n. . .\nconst result = foo(3); // will return 6\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"includemejs\"\n    }}>{`includeMe.js`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// declare the module\nfunction foo(someNumber) {\n    return(someNumber * 2);\n}\nfunction bar() {\n    return(42);\n}\nmodule.exports = {\n    foo,\n    bar\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`require`}</inlineCode>{` in UXP isn't as robust as some other include systems (e.g., it doesn't search any global paths to find the file you want), but careful use of relative paths allows you to structure your plugin directory the way you want. For example, you can have a subdirectory named `}<inlineCode parentName=\"p\">{`lib`}</inlineCode>{` and require a file in there this way:`}</p>\n    <p><inlineCode parentName=\"p\">{`const { foo, bar } = require(\"./lib/includeMe.js\");`}</inlineCode></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","CodeBlock","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}