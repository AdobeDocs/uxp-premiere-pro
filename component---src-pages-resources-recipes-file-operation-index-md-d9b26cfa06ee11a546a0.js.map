{"version":3,"file":"component---src-pages-resources-recipes-file-operation-index-md-d9b26cfa06ee11a546a0.js","mappings":"0TAMaA,EAAe,CAAC,EACvBC,EAAgBC,GAAQ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,EACMI,EAAcN,EAAc,eAC5BO,EAAYP,EAAc,aAC1BQ,EAAc,CAClBT,gBAEIU,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIV,GAAKY,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOV,EAAAA,EAAAA,KAACI,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBN,EAAK,CAAEW,WAAYA,EAAYI,QAAQ,eAG5EZ,EAAAA,EAAAA,KAAA,MACE,GAAM,mBACJ,oBACJA,EAAAA,EAAAA,KAAA,SAAI,0LACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,uBACJ,wBACJA,EAAAA,EAAAA,KAAA,SAAI,uGACJA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIa,WAAW,MAAM,iCACrBb,EAAAA,EAAAA,KAAA,MAAIa,WAAW,MAAM,yBACrBb,EAAAA,EAAAA,KAAA,MAAIa,WAAW,MAAM,mCAEvBb,EAAAA,EAAAA,KAAA,MACE,GAAM,YACJ,aACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,+BACJ,gCACJA,EAAAA,EAAAA,KAAA,SAAI,wIAGJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAK,cAAuB,sUAElDb,EAAAA,EAAAA,KAAA,SAAI,4MACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,uBACJ,wBACJA,EAAAA,EAAAA,KAAA,SAAI,0DAAyDA,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,mBAAgC,aACzHb,EAAAA,EAAAA,KAACC,EAAW,CAACa,QAAQ,OAAOC,MAAM,uBAAuBH,QAAQ,iBACjEZ,EAAAA,EAAAA,KAAA,SAAI,wBACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAK,cAAuB,qCAAoCb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,mBAAgC,sBAAqBb,EAAAA,EAAAA,KAAA,WAAU,sCAAqCA,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IAChO,KAAQ,6DACN,wBAA4B,+BAClCb,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAK,cAAuB,yBAAwBb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,mBAAgC,8GAA6Gb,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IAC7P,KAAQ,gCACN,iCAAqC,MAC3Cb,EAAAA,EAAAA,KAAA,SAAI,iEACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,iBACX,2GAONb,EAAAA,EAAAA,KAAA,SAAI,uBAAsBA,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,mBAAgC,UACtFb,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIa,WAAW,OAAKb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,MAAM,UAAuB,qDACxEb,EAAAA,EAAAA,KAAA,MAAIa,WAAW,OAAKb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,MAAM,WAAwB,uEACzEb,EAAAA,EAAAA,KAAA,MAAIa,WAAW,OAAKb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,MAAM,cAA2B,oDAE9Eb,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIa,WAAW,KAAK,UAAe,+XACtCb,EAAAA,EAAAA,KAAA,MACE,GAAM,WACJ,YACJA,EAAAA,EAAAA,KAAA,SAAI,4EACJA,EAAAA,EAAAA,KAAA,SAAI,6BAA4BA,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,YAAyB,MAAKb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,iBAA8B,QAAOb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,iBAA8B,qCACzLb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,UAAuB,MAC/Eb,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,iBACX,iJAGNb,EAAAA,EAAAA,KAACC,EAAW,CAACa,QAAQ,OAAOC,MAAM,uBAAuBH,QAAQ,iBACjEZ,EAAAA,EAAAA,KAAA,SAAI,wBACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAK,cAAuB,qCAAoCb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,mBAAgC,sBAAqBb,EAAAA,EAAAA,KAAA,WAAU,sCAAqCA,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IAChO,KAAQ,6DACN,wBAA4B,+BAClCb,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAK,cAAuB,yBAAwBb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,iBAA8B,+CACpIb,EAAAA,EAAAA,KAAA,MACE,GAAM,WACJ,YACJA,EAAAA,EAAAA,KAAA,SAAI,qDAAoDA,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,kBAA+B,SAAQb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,MAAmB,wJAC1Kb,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,kBAA+B,+CAA8Cb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,SAAsB,wGAAuGb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,MAAmB,2HACpTb,EAAAA,EAAAA,KAAA,MACE,GAAM,sBACJ,uBACJA,EAAAA,EAAAA,KAAA,SAAI,kBAAiBA,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,0CAAuD,kCAAiCb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,sBAAmC,MACxMb,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,iBACJA,EAAAA,EAAAA,KAAA,SAAI,0EAAyEA,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,QAAqB,SAAQb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,UAAuB,+EAA8Eb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,SAAsB,0HAAyHb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,QAAqB,QAAOb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,UAAuB,uFAAsFb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,UAAuB,QAAOb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,YAAyB,iCACluBb,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eACX,kgBAcNb,EAAAA,EAAAA,KAAA,SAAI,oGACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,qBACJ,sBACJA,EAAAA,EAAAA,KAACE,EAAS,CAACa,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,mBAAmBL,QAAQ,eACjFZ,EAAAA,EAAAA,KAAA,MACE,GAAM,cACJ,eACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eACX,iZAaNb,EAAAA,EAAAA,KAAA,MACE,GAAM,YACJ,aACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,iBACX,sFAMNb,EAAAA,EAAAA,KAAA,MACE,GAAM,6BACJ,8BACJA,EAAAA,EAAAA,KAACE,EAAS,CAACa,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,mBAAmBL,QAAQ,eACjFZ,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,eACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eACX,6cAaNb,EAAAA,EAAAA,KAAA,MACE,GAAM,cACJ,aACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,iBACX,0FAMNb,EAAAA,EAAAA,KAAA,MACE,GAAM,4BACJ,8BACJA,EAAAA,EAAAA,KAAA,SAAI,oKAAmKA,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,qBAAkC,SAAQb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,oBAAiC,iEAC1Sb,EAAAA,EAAAA,KAACE,EAAS,CAACa,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,mBAAmBL,QAAQ,eACjFZ,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,eACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eACX,ixCAyCNb,EAAAA,EAAAA,KAAA,MACE,GAAM,cACJ,aACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,iBACX,uFAMNb,EAAAA,EAAAA,KAAA,MACE,GAAM,iCACJ,mCACJA,EAAAA,EAAAA,KAAA,SAAI,iKACJA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIa,WAAW,MAAM,4JACrBb,EAAAA,EAAAA,KAAA,MAAIa,WAAW,MAAM,0OAEvBb,EAAAA,EAAAA,KAAA,SAAI,uIAAsIA,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IACpJ,KAAQ,gBACN,WAAe,6BACrBb,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eACX,yqBAiBNb,EAAAA,EAAAA,KAAA,MACE,GAAM,sBACJ,uBACJA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIa,WAAW,MAAM,gBAAeb,EAAAA,EAAAA,KAAA,KAAGa,WAAW,KAC9C,KAAQ,6FACN,qBACNb,EAAAA,EAAAA,KAAA,MAAIa,WAAW,OAAKb,EAAAA,EAAAA,KAAA,KAAGa,WAAW,KAC9B,KAAQ,gFACN,SAAa,SAAQb,EAAAA,EAAAA,KAAA,KAAGa,WAAW,KACrC,KAAQ,wFACN,oBACNb,EAAAA,EAAAA,KAAA,MAAIa,WAAW,OAAKb,EAAAA,EAAAA,KAAA,KAAGa,WAAW,KAC9B,KAAQ,+EACN,QAAY,SAAQb,EAAAA,EAAAA,KAAA,KAAGa,WAAW,KACpC,KAAQ,iFACN,YACNb,EAAAA,EAAAA,KAAA,MAAIa,WAAW,OAAKb,EAAAA,EAAAA,KAAA,KAAGa,WAAW,KAC9B,KAAQ,wDACN,WAERb,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,cACJA,EAAAA,EAAAA,KAAA,SAAI,6GACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAK,uBAC3Bb,EAAAA,EAAAA,KAACE,EAAS,CAACa,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,mBAAmBL,QAAQ,eACjFZ,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,eACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eACX,qSAWNb,EAAAA,EAAAA,KAAA,MACE,GAAM,cACJ,aACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,iBACX,sFAMNb,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAK,+BAC3Bb,EAAAA,EAAAA,KAACE,EAAS,CAACa,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,mBAAmBL,QAAQ,eACjFZ,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,eACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eACX,wUAUNb,EAAAA,EAAAA,KAAA,MACE,GAAM,cACJ,aACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,iBACX,0FAMNb,EAAAA,EAAAA,KAAA,MACE,GAAM,wBACJ,uBACJA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIa,WAAW,OAAKb,EAAAA,EAAAA,KAAA,KAAGa,WAAW,KAC9B,KAAQ,6CACN,eACNb,EAAAA,EAAAA,KAAA,MAAIa,WAAW,OAAKb,EAAAA,EAAAA,KAAA,KAAGa,WAAW,KAC9B,KAAQ,wDACN,WAERb,EAAAA,EAAAA,KAAA,MACE,GAAM,oBACJ,qBACJA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIa,WAAW,MAAM,iCAAgCb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,MAAM,cAA2B,iPAInH,CAEAP,EAAWY,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/resources/recipes/file-operation/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uxp-premiere-pro/uxp-premiere-pro/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"file-operations\"\n    }}>{`File operations`}</h1>\n    <p>{`To perform any file operations including read, write, create, and delete, UXP provides a couple of options. But before we look at the APIs, let's get acquainted with a few concepts.`}</p>\n    <h2 {...{\n      \"id\": \"system-requirements\"\n    }}>{`System requirements`}</h2>\n    <p>{`Please make sure your local environment uses the following application versions before proceeding.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Premiere Pro v25.2 or higher`}</li>\n      <li parentName=\"ul\">{`UDT v2.1.0 or higher`}</li>\n      <li parentName=\"ul\">{`Manifest version v5 or higher`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"concepts\"\n    }}>{`Concepts`}</h2>\n    <h3 {...{\n      \"id\": \"sandbox-and-other-locations\"\n    }}>{`Sandbox and other locations`}</h3>\n    <p>{`UXP, by default, only allows access to certain locations in the user's file system. These locations are referred to as the sandbox.`}</p>\n    {/* InlineAlert variant=\"info\" slots=\"header, text1, text2\"/*/}\n    {/* Plugins and Scripts*/}\n    <p><strong parentName=\"p\">{`In plugins`}</strong>{`, a sandbox is typically the plugin's folder, plus a temporary and data folder. The plugin's location is read-only. Whereas, the temporary and data folders are provided to you to store transitory information. Note that the data stored in these locations can get accidentally erased and should not be considered permanent.`}</p>\n    {/* **In scripts**, a sandbox just consists of a temporary folder. It is meant to store transitory information and can get accidentally erased.*/}\n    <p>{`However, we understand that there are circumstances when you would like to access other file locations as well. Accessing such locations is possible in UXP but you will need to seek permission first.`}</p>\n    <h3 {...{\n      \"id\": \"manifest-permission\"\n    }}>{`Manifest permission`}</h3>\n    <p>{`For file system access you require permission for the `}<inlineCode parentName=\"p\">{`localFileSystem`}</inlineCode>{` module.`}</p>\n    <InlineAlert variant=\"info\" slots=\"header, text1, text2\" mdxType=\"InlineAlert\" />\n    <p>{`Plugins and Scripts`}</p>\n    <p><strong parentName=\"p\">{`In plugins`}</strong>{`, you should seek permission for `}<inlineCode parentName=\"p\">{`localFileSystem`}</inlineCode>{` in your manifest.`}<br></br>{` IMPORTANT: Please read about the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../plugins/concepts/manifest/#permissionsdefinition\"\n      }}>{`manifest permissions`}</a>{` module before proceeding.`}</p>\n    <p><strong parentName=\"p\">{`In scripts`}</strong>{`, the permission for `}<inlineCode parentName=\"p\">{`localFileSystem`}</inlineCode>{` is fixed. You can ignore the manifest details in the following examples. Learn about these values in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../fundamentals/manifest/\"\n      }}>{`manifest fundamentals section`}</a>{`.`}</p>\n    <p>{`Let's understand the manifest settings a bit more in detail.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`/* manifest.json */\n{\n    \"requiredPermissions\": {\n        \"localFileSystem\": \"plugin\"\n    }\n}\n`}</code></pre>\n    <p>{`Allowed values for `}<inlineCode parentName=\"p\">{`localFileSystem`}</inlineCode>{` are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`plugin`}</inlineCode>{`: Default value. Provides access to the sandbox.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`request`}</inlineCode>{`: Let's you request the user to select a location of their choice.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fullAccess`}</inlineCode>{`: Provides full access to the user file system`}</li>\n    </ul>\n    <p><em parentName=\"p\">{`Protip`}</em>{`: Make sure you pick the most accurate permission for your use case because in the future we may ask users to provide their consent based on it. You may find 'fullAccess' to be the least restrictive and hence the safest to pick, but a user may not be comfortable giving full access to their system unless it's absolutely necessary and might deny the installation of your plugin.`}</p>\n    <h3 {...{\n      \"id\": \"schemes\"\n    }}>{`Schemes`}</h3>\n    <p>{`UXP provides a shorthand representation of these locations via schemes.`}</p>\n    <p>{`For sandbox, you can use `}<inlineCode parentName=\"p\">{`plugin:/`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`plugin-data:/`}</inlineCode>{`and `}<inlineCode parentName=\"p\">{`plugin-temp:/`}</inlineCode>{`.\nAnd, for other locations, use `}<inlineCode parentName=\"p\">{`file:/`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<img src=\"plugin:/sample.png\" />\n<img src=\"file:/Users/user/Downloads/sample.png\" /> <!-- update the path based on your system -->\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"header, text1, text2\" mdxType=\"InlineAlert\" />\n    <p>{`Plugins and Scripts`}</p>\n    <p><strong parentName=\"p\">{`In plugins`}</strong>{`, you should seek permission for `}<inlineCode parentName=\"p\">{`localFileSystem`}</inlineCode>{` in your manifest.`}<br></br>{` IMPORTANT: Please read about the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../plugins/concepts/manifest/#permissionsdefinition\"\n      }}>{`manifest permissions`}</a>{` module before proceeding.`}</p>\n    <p><strong parentName=\"p\">{`In scripts`}</strong>{`, you can avail only `}<inlineCode parentName=\"p\">{`plugin-temp:/`}</inlineCode>{` to read/write from/to a temporary folder.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`You have two options to access the file system - `}<inlineCode parentName=\"p\">{`LocalFileSytem`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`FS`}</inlineCode>{` module. These modules are very similar in terms of the capabilities they offer, however, there is a difference in the way they carry out the task.`}</p>\n    <p><inlineCode parentName=\"p\">{`LocalFileSytem`}</inlineCode>{` APIs work with an object reference called `}<inlineCode parentName=\"p\">{`Entry`}</inlineCode>{`. Having an object reference makes it easier to manage and perform multiple operations. Whereas the `}<inlineCode parentName=\"p\">{`FS`}</inlineCode>{` APIs are very similar to NodeJS path-based file system APIs which make them ideal for carrying out single operations.`}</p>\n    <h3 {...{\n      \"id\": \"localfilesytem-api\"\n    }}>{`LocalFileSytem API`}</h3>\n    <p>{`Available via `}<inlineCode parentName=\"p\">{`require('uxp').storage.localFileSystem`}</inlineCode>{` which returns an instance of `}<inlineCode parentName=\"p\">{`FileSystemProvider`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"nomenclature\"\n    }}>{`Nomenclature`}</h4>\n    <p>{`A file system is a conglomerate of files and folders. You can use the `}<inlineCode parentName=\"p\">{`File`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Folder`}</inlineCode>{` classes to refer to them. However, these classes have a base class called `}<inlineCode parentName=\"p\">{`Entry`}</inlineCode>{`. The nomenclature of some of the APIs uses 'entry' in them typically when the output type can be either of the two - `}<inlineCode parentName=\"p\">{`File`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Folder`}</inlineCode>{` and be determined only at runtime. Therefore, it's a good practice to check using `}<inlineCode parentName=\"p\">{`isfile`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`isFolder`}</inlineCode>{` before using specific APIs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { localFileSystem, types } = require('uxp').storage;\nasync function foo(){\n    // Create new folder and file\n    try {\n        const newFolderEntry = await localFileSystem.createEntryWithUrl(\"plugin-temp:/temp\", { type: types.folder });\n        if (newFolderEntry.isFolder) {\n            const newFile = await newFolderEntry.createFile(\"temp.txt\", {overwrite: true});\n            await newFile.write(\"Sample file created.\");\n        }\n    } catch (e) {\n        console.error(e);\n    }\n}\n`}</code></pre>\n    <p>{`Now let's take a look at some examples to access system locations based on permission settings.`}</p>\n    <h4 {...{\n      \"id\": \"accessing-sandbox\"\n    }}>{`Accessing sandbox`}</h4>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JSON, JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const fsProvider = require('uxp').storage.localFileSystem;\nasync function foo() {\n    // Access sandbox\n    if (fsProvider.isFileSystemProvider) {\n        try {\n            const pluginFolder = await fsProvider.getEntryWithUrl(\"plugin-data:/\");\n            console.log(\\`File path: \\${pluginFolder.nativePath}\\`);\n        } catch (e) {\n            console.error(e);\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"manifest\"\n    }}>{`manifest`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"requiredPermissions\": {\n        \"localFileSystem\": \"plugin\"\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"accessing-other-locations\"\n    }}>{`Accessing other locations`}</h4>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JSON, JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-1\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const fsProvider = require('uxp').storage.localFileSystem;\nasync function foo() {\n    // Access other location\n    if (fsProvider.isFileSystemProvider) {\n        try {\n            const pluginFolder = await fsProvider.getEntryWithUrl(\"file:/Users/user/Documents\"); // update the path based on your system\n            console.log(\\`File path: \\${pluginFolder.nativePath}\\`);\n        } catch (e) {\n            console.error(e);\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"manifest-1\"\n    }}>{`manifest`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"requiredPermissions\": {\n        \"localFileSystem\": \"fullAccess\"\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"users-choice-of-location\"\n    }}>{`User's choice of location`}</h4>\n    <p>{`These APIs are particularly handy when you want to request the user to select a folder/file location of their choice. For example, the below code snippet using `}<inlineCode parentName=\"p\">{`getFileForOpening`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`getFileForSaving`}</inlineCode>{` methods presents a file picker for the user to choose from.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JSON, JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-2\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const fsProvider = require('uxp').storage.localFileSystem;\n\nasync function foo() {\n    // Ask user to select a file. Show their 'Desktop' as the default folder.\n    if (fsProvider.isFileSystemProvider) {\n        const { domains, fileTypes } = require('uxp').storage;\n\n        try {\n            const file = await fsProvider.getFileForOpening({ initialDomain: domains.userDesktop, types: fileTypes.text });\n            if (!file) {\n                console.error(\"Something went wrong.\");\n                return;\n            }\n\n            // read the file content\n            const text = await file.read();\n            console.log(\\`File content: \\${text}\\`);\n        } catch (err) {\n            console.error(err);\n        }\n    }\n}\n\nasync function bar() {\n    // Ask user to select a location to save a file\n    if (fsProvider.isFileSystemProvider) {\n        try {\n            const file = await fsProvider.getFileForSaving(\"sample.txt\", { types: [\"txt\"] });\n            if (!file) {\n                console.error(\"Something went wrong.\");\n                return;\n            }\n\n            // write content to file\n            await file.write(\"UXP saved sample file.\");\n        } catch (err) {\n            console.error(err);\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"manifest-2\"\n    }}>{`manifest`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"requiredPermissions\": {\n        \"localFileSystem\": \"request\"\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"save-users-choice-of-location\"\n    }}>{`Save user's choice of location`}</h4>\n    <p>{`If you would like to remember the user's choice for an extended period, you can do it with the help of a token. There are two types of tokens you can create`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Session token - has a shorter span. It lasts until the plugin is 'Unloaded' from UDT or the script finishes its execution or the application is closed.`}</li>\n      <li parentName=\"ul\">{`Persistent token - is more permanent in nature, and can last for multiple sessions or until the plugin is 'Uninstalled'. (Since scripts only last for the time of their execution, you should not use persistent tokens in scripts.)`}</li>\n    </ul>\n    <p>{`The example below shows the essence of this usage but you should ideally save these tokens in the storage (more details covered in `}<a parentName=\"p\" {...{\n        \"href\": \"./storage.md\"\n      }}>{`Storage`}</a>{` section) for later use.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const fsProvider = require('uxp').storage.localFileSystem;\n\nconst { domains, fileTypes } = require('uxp').storage;\nconst entry = await fsProvider.getFileForOpening({ initialDomain: domains.userDesktop, types: fileTypes.text });\nconst token = await fsProvider.createPersistentToken(entry); // store for future use\n\nasync function readFileUsingTokensInLocalFileSystem() {\n    // In the future, access the entry using the token directly\n    try {\n        const file = await fsProvider.getEntryForPersistentToken(token);\n        const text = await file.read();\n        console.log(\\`File content: \\${text}\\`);\n    } catch (err) {\n        console.error(err);\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"reference-material\"\n    }}>{`Reference material`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Instance of `}<a parentName=\"li\" {...{\n          \"href\": \"../../../uxp-api/reference-js/Modules/uxp/Persistent%20File%20Storage/FileSystemProvider/\"\n        }}>{`localFileSystem`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../uxp-api/reference-js/Modules/uxp/Persistent%20File%20Storage/Entry/\"\n        }}>{`Entry`}</a>{` and `}<a parentName=\"li\" {...{\n          \"href\": \"../../../uxp-api/reference-js/Modules/uxp/Persistent%20File%20Storage/EntryMetadata/\"\n        }}>{`Entry metadata`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../uxp-api/reference-js/Modules/uxp/Persistent%20File%20Storage/File/\"\n        }}>{`File`}</a>{` and `}<a parentName=\"li\" {...{\n          \"href\": \"../../../uxp-api/reference-js/Modules/uxp/Persistent%20File%20Storage/Folder/\"\n        }}>{`Folder`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../uxp-api/reference-js/Global%20Members/Path/\"\n        }}>{`Path`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"fs-module\"\n    }}>{`FS Module`}</h3>\n    <p>{`Based on NodeJS file system APIs, these provide direct access to file locations with the help of schema.`}</p>\n    <p><strong parentName=\"p\">{`Accessing sandbox`}</strong></p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, JSON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-3\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const fs = require(\"fs\");\nasync function foo() {\n    // Read a file from sandbox using fs module\n    try {\n        const text = await fs.readFile(\"plugin:/sample.txt\", 'utf8');\n        console.log(\\`File content: \\${text}\\`);\n    } catch (e) {\n        console.error(e);\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"manifest-3\"\n    }}>{`manifest`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"requiredPermissions\": {\n        \"localFileSystem\": \"plugin\"\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Accessing other locations`}</strong></p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, JSON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-4\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const fs = require(\"fs\");\nasync function foo() {\n    // Write to a arbitrary location using fs module\n    try {\n        await fs.writeFile(\"/Users/user/Desktop/output.txt\", \"This is a sample text.\", {encoding: \"utf-8\"}); // update the path based on your system\n    } catch (e) {\n        console.error(e);\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"manifest-4\"\n    }}>{`manifest`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"requiredPermissions\": {\n        \"localFileSystem\": \"fullAccess\"\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"reference-material-1\"\n    }}>{`Reference material`}</h4>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../uxp-api/reference-js/Modules/fs/\"\n        }}>{`FS module`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../uxp-api/reference-js/Global%20Members/Path/\"\n        }}>{`Path`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"additional-notes\"\n    }}>{`Additional Notes`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Despite the manifest setting `}<inlineCode parentName=\"li\">{`fullAccess`}</inlineCode>{`, certain files and folders may still not be accessible. It depends on the permission of the Operating System. For Win32 and Mac, these APIs can access anywhere in the file system. But, in UWP, accessing the system folder is prohibited.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","variant","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}